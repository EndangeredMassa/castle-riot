Flashlight = require 'flashlight'
Direction = require 'player/directions'
Score = require 'score'

module.exports = class Player
  constructor: ({ @map, @id, @isGuard, @x, @y, @isMainPlayer, @name, faceDirection }) ->
    @listeners = {}
    @isMainPlayer ?= false
    @speed = 20
    @sprite = new jaws.Sprite({x: @x, y: @y, scale: 1, anchor: 'top_left'})
    @currentDirection = Direction.NONE
    @name = "Mr. " + @id
    @generateNameSprite()

    # TODO: No longer necessary?
    @sprite.blocker = true

    # TODO: probably on care if this player is the current player
    @score = new Score()

    if @isGuard
      @flashlight = new Flashlight map: @map, x: @x, y: @y, offset: [16, 24]
      @flashlight.faceDown()
    else
      # TODO: Remove?
      # @onDiscovered = ->

      @onTouchedByPlayer = (touchedMe) =>
        return unless touchedMe.isGuard
        return if @stunned
        return if touchedMe.id? && touchedMe.id == @id
        @stun()
        touchedMe.score.add 1
        setTimeout @destroy, 1000

    @initAnimation(faceDirection)

  on: (name, func) ->
    @listeners[name] ?= []
    @listeners[name].push func

  trigger: (name, args...) ->
    @listeners[name] ?= []
    func(args...) for func in @listeners[name]

  stun: ->
    @stunned = true
    @trigger "stunned"

  setFacing: (direction) ->
    if !direction
      return @sprite.setImage( @sprite.anim_down.next() )

    if direction.indexOf('n') != -1
      @moveUp()
    if direction.indexOf('s') != -1
      @moveDown()
    if direction.indexOf('e') != -1
      @moveRight()
    if direction.indexOf('w') != -1
      @moveLeft()

  initAnimation: (faceDirection) ->
    spriteSheet = if @isGuard then "guard" else "thief"

    anim = new jaws.Animation({sprite_sheet: "img/#{spriteSheet}.png", frame_size: [32,48], frame_duration: 100, orientation: 'right'})
    @sprite.anim_default = anim.slice(0,0)
    @sprite.anim_down = anim.slice(0,3)
    @sprite.anim_left = anim.slice(4,7)
    @sprite.anim_right = anim.slice(8,11)
    @sprite.anim_up = anim.slice(12,15)

    @setFacing(faceDirection)
    jaws.context.mozImageSmoothingEnabled = false;  # non-blurry, blocky retro scaling

  move: (x, y) ->
    jaws.log('Player: ' + @sprite.rect().toString())

    dt = jaws.dt()
    x = parseInt(x * dt, 10)
    y = parseInt(y * dt, 10)

    # Have our tile map return the items that occupy the cells which are touched by player.rect
    # If there's any items inside player.rect, reverse the movement (-> stand still)
    @sprite.x += x
    @sprite.y += y

    sprites = @map.atRect @footprint()

    blockedByWall = _(sprites).any (s) =>
      s.blocker && s.id != @id

    if @isMainPlayer
      for sprite in sprites
        # Main player touched other player
        sprite.onTouchedByPlayer?(@)
        # Other player touched back
        if sprite.constructor == Player
          @onTouchedByPlayer? sprite
    else
      for sprite in sprites
        # Do something if another player touches the main player
        if sprite.isMainPlayer
          sprite.onTouchedByPlayer?(@)

    if blockedByWall
      @sprite.x -= x
      @sprite.y -= y
    else
      @setPosition @sprite.x, @sprite.y

  setPosition: (x, y) ->
    @x = x
    @y = y
    @sprite.x = x
    @sprite.y = y
    @flashlight?.move x, y
    @painting?.move x, y
    @updateNameSpritePosition x, y

  moveInCurrentDirection: ->
    return if @stunned
    if @currentDirection.indexOf('n') != -1
      @moveUp()
    if @currentDirection.indexOf('s') != -1
      @moveDown()
    if @currentDirection.indexOf('e') != -1
      @moveRight()
    if @currentDirection.indexOf('w') != -1
      @moveLeft()

  orient: (direction, position) ->
    @setPosition position.x, position.y
    @currentDirection = direction

  footprint: ->
    rect = _.clone( @sprite.rect() )
    rect.x += 7
    rect.right -= 7
    rect.y += 30
    rect.height -= 30
    rect.width -= 14
    rect

  moveLeft: ->
    return if @stunned
    @move(-@speed, 0)
    @flashlight?.faceLeft()
    @sprite.setImage @sprite.anim_left.next()

  moveRight: ->
    return if @stunned
    @move(@speed, 0)
    @flashlight?.faceRight()
    @sprite.setImage @sprite.anim_right.next()

  moveUp: ->
    return if @stunned
    @move(0, -@speed)
    @flashlight?.faceUp()
    @sprite.setImage @sprite.anim_up.next()

  moveDown: ->
    return if @stunned
    @move(0, @speed)
    @flashlight?.faceDown()
    @sprite.setImage @sprite.anim_down.next()

  update: ->
    @sprite.rotate(12) if @stunned

  draw: (viewport) =>
    viewport.draw @sprite
    viewport.draw @flashlight.sprite if @flashlight
    viewport.draw @nameSprite if @nameSprite

  rect: -> @sprite.rect()

  pickUpPainting: (painting) ->
    if !@isGuard && !@painting
      @painting = painting
      @painting.pickedUp(@)
      @speed = 15

  dropPainting: ->
    if @painting
      @painting.drop()
      @painting = null
      @speed = 20

  updateName: (n) ->
    @name = n
    localStorage.setItem "name", n
    @trigger "name-change", n
    @generateNameSprite()

  generateNameSprite: ->
    canvas = $("<canvas width='200' height='20'></canvas>")[0]
    c = canvas.getContext "2d"
    c.font = "Bold 10pt Helvetica"
    textWidth = c.measureText(@name).width
    c.fillStyle = "black"
    c.textBaseline = "top"
    # $(canvas).attr "width", textWidth
    c.fillText @name, 0, 0
    
    @nameSprite = new Sprite
      image: canvas
      scale: 1
      anchor: "left_top"

    @nameSprite.textWidth = textWidth

    @updateNameSpritePosition @sprite.x, @sprite.y

  updateNameSpritePosition: (x, y) ->
    return unless @nameSprite
    x2 = x + 10 - @nameSprite.textWidth / 2
    y2 = y + 48
    @nameSprite.moveTo x2, y2
