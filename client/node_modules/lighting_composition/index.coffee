module.exports = class LightingComposition
  constructor: ({ @map, @player, @opponents, @canvas, @context }) ->
    @tempCanvas = $("<canvas height='#{@canvas.height}' width='#{@canvas.width}'></canvas>")[0]
    @tempContext = @tempCanvas.getContext('2d')

  draw: ->
    @map.draw()
    @map.drawPlayer @player
    for id, opponent of @opponents
      @map.drawPlayer opponent

    @drawFogOfWar() unless window.admin

  drawFogOfWar: ->
    @tempContext.clearRect(0, 0, @tempCanvas.width, @tempCanvas.height)
    @tempContext.beginPath()
    playerMidPoint =
      x: @player.x - @map.getOffset().x + @player.sprite.width / 2
      y: @player.y - @map.getOffset().y + @player.sprite.height / 2
    if @player.flashlight?
      @createGuardLightedAreaPath(playerMidPoint)
    else
      @tempContext.arc(playerMidPoint.x, playerMidPoint.y, @getImmediateRadius(), 0, 2 * Math.PI)
    @tempContext.fillStyle = 'rgba(0,0,0,1)'
    @tempContext.fill()
    @tempContext.globalCompositeOperation = 'xor'
    @tempContext.beginPath()
    @tempContext.rect(0, 0, @canvas.width, @canvas.height)
    @tempContext.fill()
    @context.drawImage(@tempCanvas, 0, 0)

  createGuardLightedAreaPath: (playerMidPoint) ->
    beamLength = 128
    beamWidth = 96
    radius = @getImmediateRadius()
    facing = @player.flashlight.facing
    topPoint = _.clone(playerMidPoint)
    bottomPoint = _.clone(playerMidPoint)
    startAngle = null
    switch facing
      when 'left'
        startAngle = Math.PI / 2
        topPoint.y -= beamWidth / 2
        topPoint.x -= beamLength
        bottomPoint.y += beamWidth / 2
        bottomPoint.x -= beamLength
      when 'right'
        startAngle = 3 * Math.PI / 2
        topPoint.y += beamWidth / 2
        topPoint.x += beamLength
        bottomPoint.y -= beamWidth / 2
        bottomPoint.x += beamLength
      when 'up'
        startAngle = Math.PI
        topPoint.x += beamWidth / 2
        topPoint.y -= beamLength
        bottomPoint.x -= beamWidth / 2
        bottomPoint.y -= beamLength
      when 'down'
        startAngle = 0
        topPoint.x -= beamWidth / 2
        topPoint.y += beamLength
        bottomPoint.x += beamWidth / 2
        bottomPoint.y += beamLength
    @tempContext.arc playerMidPoint.x, playerMidPoint.y, radius, startAngle, startAngle + Math.PI, true
    @tempContext.lineTo topPoint.x, topPoint.y
    @tempContext.lineTo bottomPoint.x, bottomPoint.y
    @tempContext.closePath()

  getImmediateRadius: ->
    if @player.isGuard
      @player.sprite.height
    else
      2 * @player.sprite.height
