tileKeys = require './tile_keys'
Painting = require "painting"
Door = require "door"

module.exports = class Map
  constructor: (tilePositions) ->
    @height = 30
    @width = 50
    @cellSize = 32

    @viewport = new jaws.Viewport max_x: @width * @cellSize, max_y: @height * @cellSize
    @tileMap = new jaws.TileMap size: [@width, @height], cell_size: [@cellSize, @cellSize]
    @blocks = window.blocks = new jaws.SpriteList()

    ss = new jaws.SpriteSheet(frame_size: [16,16], image: 'img/dungeon.png', orientation: 'right')
    nonBlockingIds = tilePositions.nonBlockingIds

    @forEachTile (x,y) =>
      i = y * @width + x
      j = tilePositions.tileKeys[i]
      s = new Sprite(image: ss.frames[j], x: x * @cellSize, y: y * @cellSize, scale: 2)
      s.blocker = true unless _(nonBlockingIds).include(j)
      @blocks.push s

    # Fit all items in array blocks into correct cells in the tilemap
    # Later on we can look them up really fast (see player.move)
    @tileMap.push(@blocks)

    @players = []
    @paintings = []
    @doors = []
    for atts in tilePositions.doors
      @doors.push new Door(atts)

  forEachTile: (cb) ->
    y = 0
    while y < @height
      x = 0
      while x < @width
        cb(x, y)
        x++
      y++

  addPainting: (painting) ->
    @paintings.push painting

  removePainting: (painting) ->
    index = @paintings.indexOf(painting)
    @paintings.splice(index, 1)

  addPlayer:  (player) ->
    @players.push player

  removePlayer: (deadPlayerId) ->
    @players = _.reject @players, (player) ->
      player.id == deadPlayerId

  playersAt: (rect) ->
    _.filter @players, (player) ->
      player.footprint().collideRect(rect)

  paintingsAt: (rect) ->
    _.filter @paintings, (painting) ->
      painting.rect().collideRect(rect)

  doorsAt: (rect) ->
    _.filter @doors, (door) ->
      door.rect().collideRect(rect)

  atRect: (rect) ->
    sprites = @tileMap.atRect rect
    sprites = sprites.concat @playersAt(rect)
    sprites = sprites.concat @paintingsAt(rect)
    sprites = sprites.concat @doorsAt(rect)
    sprites

  draw: ->
    @viewport.drawTileMap @tileMap
    @viewport.draw painting.sprite for painting in @paintings
    @viewport.draw door.sprite for door in @doors

  drawPlayer: (player) ->
    player.draw @viewport

  update: ->
    player.update() for player in @players
    door.update() for door in @doors
    @viewport.centerAround @centerSprite if @centerSprite

  centerOnSprite: (sprite) ->
    @centerSprite = sprite

  getOffset: ->
    x: @viewport.x
    y: @viewport.y
